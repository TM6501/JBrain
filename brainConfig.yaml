# All minimum and maximum values listed here are the minimum and maximum
# starting values that can be put into the brains at the start.
# Other factors may increase or decrease these values beyond the values to
# which mutation set them.

# Variables with names that include "MinMax" should be interpretted as,
# "The maximum value is mutable, this is the minimum to which the mutation can change it."
# The same principle applies with "MaxMax", "MinMin", and "MaxMin"
# It is up to the user of this script to ensure that these values do not overlap in a way which
# violates min/max logic principles.

# All "probabilities" are given as values between 0 and 1 representing 0% to 100%
Dendrite:
  MinMaxLength: 4.5
  MaxMaxLength: 7.5
  MinMinCount: 1
  MaxMinCount: 3
  MinMaxCount: 5
  MaxMaxCount: 8
  MinMinWeight: -2.0
  MaxMinWeight: -0.5
  MinMaxWeight: 0.5
  MaxMaxWeight: 2.0

  # See Neuron->MinLowHealthChange for a full description of how these variables
  # will be used. They are used in a similar manner, but with respect to
  # dendrite location.
  # The moveToward value will also be the threshold for the random movement,
  # if the output program uses it.
  # The move amount is used as a percentage of away/towards a target
  # and an absolute value for the random movement. We may want to separate
  # those into two different mutatable parameters, but for now, we simplify.
  MinLowMoveAway: -0.6
  MaxLowMoveAway: 0.0
  MinHighMoveToward: 0.0
  MaxHighMoveToward: 0.6
  MinMoveAmount: 0.02
  MaxMoveAmount: 0.5

  # Same, but for weight change:
  MinLowWeightDecrease: -0.6
  MaxLowWeightDecrease: 0.0
  MinHighWeightIncrease: 0.0
  MaxHighWeightIncrease: 0.6
  MinWeightChangeAmount: 0.1
  MaxWeightChangeAmount: 0.5

Axon:
  MinMaxLength: 3.5
  MaxMaxLength: 7.5
  MinMinCount: 1
  MaxMinCount: 3
  MinMaxCount: 5
  MaxMaxCount: 8

  # See Neuron->MinLowHealthChange for a full description of how these variables
  # will be used. They are used in a similar manner, but with respect to
  # dendrite location.
  # The moveToward value will also be the threshold for the random movement,
  # if the output program uses it.
  MinLowMoveAway: -0.6
  MaxLowMoveAway: 0.0
  MinHighMoveToward: 0.0
  MaxHighMoveToward: 0.6
  MinMoveAmount: 0.02
  MaxMoveAmount: 0.5

Neuron:
  FireProbabilistic: Mutable  # True: Probabilistic, False: Threshold
  MinFireThreshold: 0.1 # If using fire threshold, minimum starting fire threshold
  MaxFireThreshold: 0.95

  # This is the list of activation functions that can be applied after
  # a neuron sums its inputs but before there is a check against the fire
  # threshold. Available options: None, Tanh, Sigmoid
  ActivationFunctions:
    - None
    - Tanh
#    - Sigmoid

  # Max neuron age. This does not mean the neuron dies when it reaches this
  # age. This in the value at which the normalized neuron-age value will
  # reach 1.0. Age is measured in brain time steps.
  MaxNeuronAge: 500

  # Refractory period in effectively turned off if it is set to zero:
  MinRefractoryPeriod: 0
  MaxRefractoryPeriod: 3

  # If dynamic fire thresholds are used, refractory periods are ignored.
  # With dynamic fire thresholds, the fire threshold will go up every time
  # the neuron fires and down any time that it doesn't. This threshold value
  # will also apply to probabilistic firing. The fire threshold will start
  # at FireThreshold for each neuron.
  UseDynamicFireThresholds: True
  MinFireThresholdIdleChange: -0.35
  MaxFireThresholdIdleChange: -0.05
  MinFireThresholdActiveChange: 0.05
  MaxFireThresholdActiveChange: 1.0
  
  # Boolean, if false the neuron is placed randomly. Else, the nearby-variables apply:
  NeuronDuplicatesNearby: Mutable
  MinMinNearbyDistance: 0.01
  MaxMinNearbyDistance: 0.25
  MinMaxNearbyDistance: 0.3
  MaxMaxNearbyDistance: 0.5

  # The health at which neurons duplicate or die:
  MinStartingDuplicateHealth: 0.8
  MaxStartingDuplicateHealth: 2.0
  MinStartingDeathHealth: -1.0
  MaxStartingDeathHealth: 0.0

  # The starting health value of neurons at creation:
  MinNeuronStartingHealth: 0.6
  MaxNeuronStartingHealth: 0.6

  # These values are needed if "HEALTH_INCREASE_DECREASE" is used by the 
  # neuron CGP program. If not, they are ignored. These values dictate the
  # CGP output ranges which health goes up or down and by how much. If X is the
  # CGP health-change output, then these values are used as such:
  # (X < LowHealthChange) -> Health lowers by HealthChangeAmount
  # (X > HighHealthChange) -> Health raises by HealthChangeAmount
  # Else: Health doesn't change.
  MinLowHealthChange: -0.8
  MaxLowHealthChange: 0.0
  MinHighHealthChange: 0.0
  MaxHighHealthChange: 0.8
  MinHealthChangeAmount: 0.02
  MaxHealthChangeAmount: 0.2

  # The health change to a neuron due to duplication.
  MinNeuronDuplicateHealthChange: -0.4
  MaxNeuronDuplicateHealthChange: -0.05
  
  # If True, the NeuronDuplicateHealthChange value will be ignored
  # and instead, the neuron's health will reset to NeuronStartingHealth
  # when it is duplicated:'
  HealthResetAtDuplication: Mutable

  # Duplication and death threshold changers. These values will gradually change the health levels
  # that trigger neuron duplication and death. The goal is that every death/duplication makes repeating
  # that event harder and repeating the opposite event easier to prevent neuron explosion or total
  # neural collapse.
  # When a neuron duplicates, the health required to trigger duplication or death be multiplied by this value, thus making it more
  # difficult to duplicate and easier to die. When a neuron dies, those values will be divided by this value, making it easier
  # to duplicate and harder to die.
  MinHealthThresholdMultiplier: 1.1
  MaxHealthThresholdMultiplier: 1.5

  # It is important that a neuron firing can lower the input values to
  # other neurons as well as raise them. This allows for the creation of
  # inhibitory neurons. Fire values will exist an the neuron level, meaning
  # every axon from this neuron will fire at this value.
  # EDIT: For now, inhibitory values will be handled by negative weights on
  #       dendrites.  All neuron fire values will be positive.
  MinMinFireValue: 1.0
  MaxMinFireValue: 1.0
  MinMaxFireValue: 1.0
  MaxMaxFireValue: 1.0

  # These values dictate how a neuron's fire deteriorates over time and space.
  # Space deterioration:
  # Input = <Neuron's fire output> / (1 + (<parameter> * <Distance from axon squared>))
  MinNeuronSpaceDeteriorationParameter: 5.0
  MaxNeuronSpaceDeteriorationParameter: 30.0

  # Time deterioration:
  # Input = <Neuron's fire output> / (1 + (<parameter> * <time steps since neuron firing>))
  MinNeuronTimeDeteriorationParameter: 2.0
  MaxNeuronTimeDeteriorationParameter: 4.0
  
  # Instead of deteriorating forever, the neuron's firing eventually just disappears:
  MinNeuronFireLifetime: 2
  MaxNeuronFireLifetime: 6

  # This file, if provided, will define static neurons. These neurons will
  # be the starting neurons for every brain. The file can provide standard
  # neurons, output neurons, or both. If one or the other isn't provided,
  # the standard random process will be used. This value should be
  # None if a file isn't being used. 
  NeuronDefinitionFile: staticNeurons.json

Sleep:  # Not implemented yet
  UsePreTrainSleep: False
  UsePostTrainSleep: False
Brain:
  InputCount: 4  # Inputs TO the brain
  InputsOnOneSide: True  # Alternative: Placed randomly. All have X coord = 0.0
  InputLocationsPassToChildProbabilityMinimum: 0.2  # Not implemented, yet.
  InputLocationsPassToChildProbabilityMaximum: 1.0  # Not implemented, yet.

  # If inputs age (true), then they are treated like any other neuron's axon
  # fire: It spikes, then gradually falls off. Otherwise (false), they are
  # ageless and act in calculations as though they always just fired.
  InputsAge: Mutable

  OutputCount: 2  # Outputs FROM the brain
  OutputsOnOneSide: True  # All have X coord = max
  OutputLocationsPassToChildProbabilityMinimum: 0.2  # Not implemented, yet.
  OutputLocationsPassToChildProbabilityMaximum: 1.0  # Not implemented, yet.
  MinDimension: 10.0
  MaxDimension: 10.0
  UseSameValueForAllDimensions: True

  # Instead of having a simple output dendrite, use an output neuron.
  # These output neurons' dendrites' will have their own CGP updater separate
  # from the CGP programs used elsewhere. This parameter must be True or False,
  # not mutable. If it is True, there is expected to be a description of the
  # output neuron dendrite's CGP parameters.
  UseOutputNeurons: True

  # The number of time steps between when the environmental inputs are
  # provided to the brain and when the brain's outputs are read and given
  # back to the environment. 0 would indicate that the inputs are set
  # and outputs read simultaneously, giving none of the neurons time to fire:
  MinProcessingTimeStepsBetweenInputAndOutput: 2
  MaxProcessingTimeStepsBetweenInputAndOutput: 9

  # Brains have some residual changes that persist after an input
  # has been processed. If this value is true, the brain will set all
  # neurons to a blank slate between inputs. Otherwise, persistent changes,
  # such as refractory time, will persist:
  ResetBeforeProcessingInput: True  # Not yet implemented
  
  # Chance for any given neuron that it will be recreated in its child's
  # brain. All other neurons are random:
  ProbabilityNeuronRecreatedInChild: 0.4  # Not implemented, yet.
  MinMinStartingNeurons: 4
  MaxMinStartingNeurons: 7
  MinMaxStartingNeurons: 8
  MaxMaxStartingNeurons: 12

  # To prevent neuron-explosion from bad brain mutations, set a max count:
  MaxNeuronCount: 150

Circuit:  
  ########## Need something for creating and destroying circuits.  Random? Health? Require certain amount?
  #########  Possibly kill circuit when too few neurons remain? Split circuits with too many?
  MinMinDimension: 0.5
  MaxMinDimension: 0.5
  MinMaxDimension: 1.1
  MaxMaxDimension: 1.1 
  UseSameValueForAllDimensions: True
  
  MinMinCircuitCount: 3
  MaxMinCircuitCount: 3
  MinMaxCircuitCount: 10
  MaxMaxCircuitCount: 10
  MinProbabilityIndividualCircuitIsPassedToChild: 0.5
  MaxProbabilityIndividualCircuitIsPassedToChild: 0.5
  
  # These values change the firing threshold OR the outcome of the
  # probability check to see if the neuron fires based. It is cumulative,
  # meaning as more and more neurons in the same circuit fire, the chances
  # of additional neurons in the same circuit firing goes up.
  MinFireProbabilityChangeDueToOtherNeuronsInTheSameCircuitFiring: 0.0
  MaxFireProbabilityChangeDueToOtherNeuronsInTheSameCircuitFiring: 0.0

  # This is the chance that if a neuron is in a circuit and duplicates
  # whether that neuron will be guaranteed to appear in the same circuit.
  # This value will override the duplicate-nearby parameters found in the
  # neuron section:
  MinNeuronDuplicatesInSameCircuit: 0.5
  MaxNeuronDuplicatesInSameCircuit: 0.5

  # These variables will dictate how neurons health are changed
  # based on the death or duplication of neurons in their shared circuit:
  MinNeuronHealthChangeFromDeath: 0.0
  MaxNeuronHealthChangeFromDeath: 0.0
  MinNeuronHealthChangeFromDuplication: 0.0
  MaxNeuronHealthChangeFromDuplication: 0.0

  CircuitsCanOverlap: False

Equation:
  # SageAlgorithm: PPO
  # SageFileName: PPO_CartPole_v1

  # The inputs that the dendrite program will use. These apply
  # for the whole experemint and aren't mutated. A different 
  # naming scheme is used for these so that they match their enum
  # variations in the code:
  DendriteProgramInputs:
    # Percentage of times that the brain's recent outputs matched
    # with another output. If this is True, "SageAlgorithm" and "SageFileName"
    # must be provided a level above.
    SAGE_MATCH_PERCENT: True
    CURRENT_WEIGHT: True
    # X, Y, and Z of the direction of the strongest recent input,
    # and whether or not that is a brain-input axon (alternative is that
    # it is an axon attached to a neuron in the brain).
    # Also include the strongest input value:
    STRONGEST_INPUT_XYZ: False
    STRONGEST_INPUT_DISTANCE: True
    STRONGEST_INPUT_IS_OBSERVATION_AXON: True
    STRONGEST_INPUT_VALUE: True
    ##### STRONGEST_INPUT_IS_SELF  -- Want eventually.
    # STRONGEST_INPUT_PERCENTAGE_OF_TOTAL_INPUT: False
    # X, Y, and Z of the direction of the nearest axon and whether or not
    # it is an observation axon.
    NEAREST_AXON_XYZ: False
    NEAREST_AXON_DISTANCE: True
    NEAREST_AXON_IS_OBSERVATION_AXON: True
    NEAREST_AXON_IS_PART_OF_SAME_NEURON: True
    # Average magnitude of the value provided to the neuron from this
    # dendrite:
    INPUT_MAGNITUDE: True
    # The length of this dendrite:
    CURRENT_LENGTH: True
    # Information about the parent neuron:
    NEURON_AGE: True
    NEURON_HEALTH: True

    # Can't be used by standard dendrite (only output dendrites)
    EXPECTED_OUTPUT_DIFF: False
  
  # These are the values that will be updated by the dendrite program.
  # Any value not marked as True here will be unmodified by the program.
  DendriteProgramOutputs:
    LOCATION: False # 3 outputs: deltas for X, Y, and Z.

    # These are used in conjunction with LowMoveAway, HighMoveToward, and MoveAmount
    # Rather than giving an amount to move, the value is checked against a threshold
    # and if met, a the dendrite moves a static amount toward/away from the target:
    STRONGEST_INPUT_CLOSER_FURTHER: True
    NEAREST_AXON_CLOSER_FURTHER: True

    # Like above, if this value is higher than a given threshold, the
    # dendrite will move a static amount in a random direction:
    RANDOM_MOVEMENT_THRESHOLD: True

    # Closer_to... moves the dendrite X% [-1.0, 1.0] closer to the location
    # of the specified value. With both applied, it can move twice.
    # If Location is also specified, it will be move 3 times by 3
    # somewhat-independent decisions. Negative values will move the dendrite
    # away from the specified target. If these are used in conjunction with
    # STRONGEST_INPUT_CLOSER_FURTHER and/or NEAREST_AXON_CLOSER_FURTHER,
    # multiple independent moves will be made, making it hard for the
    # brain to learn:
    CLOSER_TO_STRONGEST_INPUT: False
    CLOSER_TO_NEAREST_AXON: False
    HEALTH: False # Change in health; DENDRITE HEALTH NOT CURRENTLY IMPLEMENTED.
    WEIGHT: False # Change to the weight applied to the input
    WEIGHT_HIGHER_LOWER: True # Similar to ..._CLOSER_FURTHER parameters

  # This CGP program applies only to the dendrites of the output neuron, if output
  # neurons are being used. If not, this is ignored.
  # Due to how the YAML is read in, all of the possible dendrite values must
  # be included. Set values to false to not use them.
  OutputNeuronDendriteProgramInputs:
    SAGE_MATCH_PERCENT: False    
    STRONGEST_INPUT_XYZ: False
    STRONGEST_INPUT_DISTANCE: True
    STRONGEST_INPUT_IS_OBSERVATION_AXON: True
    STRONGEST_INPUT_VALUE: True
    NEAREST_AXON_XYZ: False
    NEAREST_AXON_DISTANCE: True
    NEAREST_AXON_IS_OBSERVATION_AXON: True
    NEAREST_AXON_IS_PART_OF_SAME_NEURON: True
    INPUT_MAGNITUDE: True    
    CURRENT_LENGTH: False
    NEURON_AGE: False
    NEURON_HEALTH: False
    EXPECTED_OUTPUT_DIFF: False
    CURRENT_WEIGHT: True
  
    # Unique to output neuron:
    # This assumes we'll keep using brain-output as the update trigger and
    # an update frequency of 1. If those are set differently, this should be
    # set to False to prevent calculation issues.
    EXPECTED_OUTPUT_DIFF: True

  OutputNeuronDendriteProgramOutputs:
    STRONGEST_INPUT_CLOSER_FURTHER: True
    NEAREST_AXON_CLOSER_FURTHER: True
    RANDOM_MOVEMENT_THRESHOLD: True
    CLOSER_TO_STRONGEST_INPUT: False
    CLOSER_TO_NEAREST_AXON: False
    WEIGHT: False # Change to the weight applied to the input
    WEIGHT_HIGHER_LOWER: True # Similar to ..._CLOSER_FURTHER parameters
    LOCATION: False # 3 outputs: deltas for X, Y, and Z.
    HEALTH: False # Change in health; DENDRITE HEALTH NOT CURRENTLY IMPLEMENTED.

  AxonProgramInputs:
    SAGE_MATCH_PERCENT: True   
    # X, Y, and Z of the direction of the nearest dendrite.
    NEAREST_DENDRITE_XYZ: False
    NEAREST_DENDRITE_IS_PART_OF_SAME_NEURON: True
    
    # 0 if the nearest dendrite is attached to a neuron, 1 if that dendrite
    # is an output read for the brain's output:
    DENDRITE_TYPE: True
    # Percentage of times that this neuron fired when possible (not resting)
    PERCENTAGE_FIRE: True
    PERCENTAGE_BRAIN_FIRE: True
    NEURON_AGE: True
    NEURON_HEALTH: True
    CURRENT_LENGTH: True

  AxonProgramOutputs:
    LOCATION: False # 3 outputs, X, Y, and Z
    NEAREST_DENDRITE_CLOSER_FURTHER: True
    
    # Like above, if this value is higher than a given threshold, the
    # axon will move a static amount in a random direction:
    RANDOM_MOVEMENT_THRESHOLD: True
    HEALTH: True # Change, not absolute value. Not implemented yet.    

  NeuronProgramInputs:
    SAGE_MATCH_PERCENT: True
    NEURON_AGE: True
    NEURON_HEALTH: True
    PERCENTAGE_FIRE: True
    # The average frequency at which all neurons in the brain fired:
    PERCENTAGE_BRAIN_FIRE: True

  NeuronProgramOutputs:
    HEALTH: False # Absolute change of the neuron's health
    # HEALTH_INCREASE_DECREASE cannot be used in conjunction with HEALTH.
    # With this output, the health values change in accordance with the variables:
    # LowHealthChange, HighHealthChange, and HealthChangeAmount.
    # See their descriptions above.
    HEALTH_INCREASE_DECREASE: True

  # Update frequency parameters. These dictate how often the CGP programs to
  # update the brain and its components are run. Events are recorded between
  # updates and a summary metric is passed to the update programs.
  # The metric is determined by the program. It could be a sum, mean, median,
  # or any other value to try to accurately represent what happened since
  # the last time the update program was triggered.
  
  # Event determines the triggering update event:
  #  - Scenario_Run: At the end of a full run through an RL environment.
  #  - Brain_Output: At the end of an input to output cycle through the brain.
  #  - Time_Step: At the end of a single time cycle, of which there may be
  #              many for every time the brain receives an input and is
  #              required to produce output. Using this will dramatically
  #              increase the processing time required.
  # Because this parameter can so drastically change the time required to
  # run an experiment, it is not mutable. The experimenter must set this value
  # to one of the above possible values.
  UpdateProgramsEvent: Brain_Output
  
  # Frequency dictates how many times the update event must occur between
  # update programs running. 1 means every time.
  MinUpdateProgramsFrequency: 1
  MaxUpdateProgramsFrequency: 1

  # Each CGP Node needs to be constrained so values don't grow or shrink out of control:
  # It is also important to set these values such that MinHighConstraint > MaxLowConstraint
  # to prevent non-functional CGP equations.
  MinLowConstraint: -5.0
  MaxLowConstraint: 0.0
  MinHighConstraint: 1.0
  MaxHighConstraint: 5.0

  # P-values are constant values passed to a function, independent of any
  # inputs from the current circumstance:
  MinMinP: -2.0
  MaxMinP: 0.0
  MinMaxP: 0.0
  MaxMaxP: 2.0

  # How many CGP neurons will be allocated per program to start.
  # If FrameShift CGP is used, the CGP program may self-modify this number:
  DendriteProgramCGPNodes: 200
  OutputDendriteProgramCGPNodes: 200
  AxonProgramCGPNodes: 200
  NeuronProgramCGPNodes: 200

  # This list of functions indicates whether on not the function is
  # available for any given JBrainCGPIndividual to use in its processing.
  # If a brain uses a function, then mutates into an individual that can't use
  # it, it will be removed from options for later mutations. It won't be removed
  # from the current processing path. It is important to have at least a few
  # functions in this list set to True to prevent the possibility of mutating
  # into an individual with no available functions.
  
  # Implementations of mutating these values aren't currently implemented.
  # True or False will be dictated here or determined by the first
  # random brain.
  AvailableFunctions:
    AND: False
    OR: False
    NAND: False
    NOR: False
    XOR: False
    ANDNOTY: False
    ADD: True
    SUBTRACT: True
    CMULT: True
    MULT: True
    DIVIDE: True
    CDIVIDE: True
    INV: True
    ABS: True
    SQRTX: True
    SQRTXY: True
    CPOW: True
    POW: True
    EXPX: True
    SINX: False
    ASINX: False
    COSX: False
    ACOSX: False
    TANX: False
    ATANX: False
    LTE: True
    GTE: True
    GTEP: True
    LTEP: True
    MAX: True
    MIN: True
    XWIRE: False
    YWIRE: False
    CONST: True

# These are variables related to how the experiment is set up and where the
# data is stored:
Experiment:
  MainDataDirectory: D:\Sync\PhD\ExperimentData\
  ExperimentName: TestStaticNeurons

  # If "None", the directory for this experiment will be dynamically generated and the
  # experiment will start. If not "None", this is expected to be the absolute path to
  # the directory of an experiment in progress. Setting this value to a folder will
  # make all other parameters in this yaml file irrelevant. A copy of the yaml which
  # described the experiment is in the folder and will be used.
  # It is important that the path here ends with a backslash.
  ExperimentDirectory: None

  # Some reward functions base their grade on only the scores during the 
  # test trials, so we separate from training trials:
  TrainTrials: 190
  TestTrials: 10  # At least 1 to prevent division by 0 problems elsewhere
  MaximumEpochs: 200
 
  StartingPopulationSize: 15

  # Not actually a maximum, but if reward reaches this, the experiment ends.
  MaximumReward: 3.0
  
  # The reward at which we will add a group of random brains to the population
  # because the current population is performing very poorly:
  PopulationInfusionReward: 0.2
  PopulationInfusionSize: 10
 
  # Differing reward calculations and the multipliers that should be applied
  # to them as they are included as part of the final calculation.
  # Not the most extensible way to do this, but this section will provide a
  # multiplier for each new reward type. These reward equations will be
  # hardcoded in the test app. It is important to take this section of rewards
  # into account when setting the maximum reward above:
  Reward_TestPercentSageMatch: 1.0 # Percent between 0.0 and 1.0
  Reward_AllTrendlineSlope: 1.0
  Reward_TestMaxMinPercentDiff: -0.0
  Reward_PenaltyForBrainCrash: -2.0  # Added to the score if the brain has no neurons.
